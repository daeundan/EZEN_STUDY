--- 자바스크립트 여정! ---
변수
자료형
연산자
조건문
반복문
함수
DOM
EVENT
DOM & EVENT 응용
객체
Class 시작!
========

Class : 생성자 함수
동일한 기능이지만 객체 지향 언어와는 본질적으로 다름 //  신문법 - 더 다양함
무늬만 흉내내고 있을 뿐, 스크립트의 본질적인 성향은 프로토타입 형태를 띈다.

사용하는 구조의 형태가 다를 뿐 거의 유사하다.

상속

매개변수 (인자값)

생성자 함수로 만들려는 것 = 인스턴스 객체
this

도킹작업 필요
지구에서 달나라를 향해 우주선 발사하면
바로 가지 않고 우주정거장에 가게됨
터미널에 정확하게 안착해야 기타 요소나 식량 등 찾아옴.
그때 도킹을 해야한다.
도착지점이 어딘데!? 라는 말


-타입스크립트에서만 사용하는 문법!
// extends : 비필수
// implement (*TS) : 특정 값을 상속 받는다면 반드시! 필수적으로! 상속받은 값을 사용해야 함.




문자열 - 자료형 입력할 때 사용햇음

왼쪽부터 읽어나감, 대소문자 가림

(1) 특정위치의 문자에 접근하고자 할 때! : charAt(위치)

(2) indexOf : 특정 문자열을 인자값으로 제공하고, 해당 문자열이 시작되는 인덱스 값을 찾아옴.

(3) 특정 문자열로 시작하거나 끝나거나 혹은 포함하고 있거나
startWitjh() // endWith() // includes()
상기의 해당 조건에 부합하는지 여부를 체크할 때 주로 사용
조건에 부합하면 true // 부합하지 않으면 false

*** trim() ***
trim() : 앞과 뒤의 공백을 없애는 함수
   (ex)
     let str3 = "ab cd ef";
     console.log(str3.trim());


**** substring() 과 slice() ****
문자열 중 탑티어 slice
slice 는 뒤에나온 문법임 : 업그레이드 기능 : 음수값을 사용할 수 있음

**** 구분자 역할을 하는 split()함수 ****

(ex) 이메일 abcd@naver.com 구분해야 할 경우 사용되기도 함

(코드 예제)
const str5 = "Hello everyone";
console.log(str5.split(" "));

콘솔 창에 ['Hello', 'everyone']

console.log(str5.split("")); //문자 그 자체 인식

콘솔 창에  ['H', 'e', 'l', 'l', 'o', ' ', 'e', 'v', 'e', 'r', 'y', 'o', 'n', 'e']

=> 빈 공간 쪼갤때 배열로 인식시킨다.

▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼ 문자열 && 배열 ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
외우지 말고, 써보면서 익힐 것
" 아 이거였지~ "

배열
join()
concat()
reverse()
sort()
pop()
★push() => 원탑!
shift()
unshift()
★splice() => 투탑
★slice() => 쓰리탑
.
.
.

(1) 둘 다 length 사용
(2) 둘 다 index 값 지님. (0부터 시작 // 좌측부터 읽음)

(3) ES6 적용되기 전 문자열 들어오기 전 split

배열의 문자열과 

join

자료구조 & 알고리즘 들어갈 때에도
배열을 얼만큼 잘 활용하는가가 중요함

모든 프로그램에 배열이 있음
자바스크립트 배열을 잘 배우면 파이썬, 자바 잘 배울 수 있음.

배열을 만드는 방법

(1)생성자 함수

(2) 변수에 빈 배열 할당 & 선언
로또번호, 추첨, 조별인원 뽑기 등
 ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
endsWith()
★includes()
★trim()
trimStart()
trimEnd()
★toUpperCase()
★toLowerCase()
★substring()
★slice() => 원탑
★split() => 투탑

let pets = ["dog", "cat", "mouse"];
// "" : 형변환 장치 문자아님!!
console.log(pets);


['dog', 'cat', 'mouse']
0
: 
"dog"
1
: 
"cat"
2
: 
"mouse"
length
: 
3

**********배열에서 값을 수정하는 방법!!**********
(ex)
let pets = ["dog", "cat", "mouse"];
// "" : 형변환 장치 문자아님!!;
pets[0] = "hamster"; // dog가 hamster로 바뀜
// 접근이 가능하면 제어가 가능하다. 배열값 수정!
console.log(pets);

//배열 => 이터러블 객체
// 이ㅓㅌ레이터 요소!
// 제너레이터 // map & set

반복문

for // for of // forEach

for 문 : 초기값, 범위, 증감연산자 사용해야함
forEach문 : 자동으로 한타에 끝낼 수 있음

// forEach 문: 콜백함수 사용해야함

★forEach 인자값 하나인 경우 : 콜백함수의 인자값이 하나일 때는 앞에 붙은 배열 객체의 아이템 자식요소 하나하나를 끄집어 내겠다

★forEach: 인자값이 2개인 경우 : 2번째 값으로 인덱스 값이 가능함. 이터러블 객체의 대표주자인 배열은 당연히 인덱스 값을 지녔기 때문. 

★forEach: 인자값이 3개인 경우 :  배열 그 자체를 의미(ex.colors) array 써도되고 jjanggu써도되지만 직관적으로 쓰기!

(ex)
colors.forEach((color, index, array) => {
  console.log(`${array}`);
});


(ex)

colors.forEach((color, index, array) => {
  console.log(`[${array}][${index}] : ${color}`);
});

콘솔 창 : 
[red,green,blue,white,black][0] : red
script.js:42 [red,green,blue,white,black][1] : green
script.js:42 [red,green,blue,white,black][2] : blue
script.js:42 [red,green,blue,white,black][3] : white
script.js:42 [red,green,blue,white,black][4] : black


머릿속에 탑재!!

배열을 쓸 때 직감적으로 꼭 기억해야 해야되는 것들!!!!!!!!!!!!!
1. 배열 선언할 때에는 변수명은 복수로!
2. 일반 for문 선언시 블록변수는 0으로 시작해야함!
3. 배열을 담을 변수를 선언할 때, const로 할지? let으로 할지? 
먼저 생각해야 한다! 생성해주는 메서드 함수가 있기 때문에..
배열은 문법적으로 빈 배열을 먼저 생성해 놓고 push나 shift로 인해
값을 추가하는 행위가 생각보다 많음. 


[예시1]
let week = ["sun", "mon", "tue"];

console.log(week);
console.log(week.sort()); //abcd 알파벳 순, 오름차순(낮은 것부터 큰 것 순서로 )

콘솔창 출력 
//
(3) ['sun', 'mon', 'tue'] -> 그냥 콘솔 출력시 원래 쓴 순서대로
(3) ['mon', 'sun', 'tue'] -> sort 사용시 알파벳 순서대로 출력됨
//

[예시2]
let values = [5, 20, 3, 11, 4, 15];

console.log(values);
console.log(values.sort());

sort를 사용할 때에는 반드시 개발자가 정의하고자 하는 함수를 콜백으로 입력해야 함! 컴퓨터가 읽는 방식이 다르기 때문!

콘솔창 출력 
(6) [5, 20, 3, 11, 4, 15]
(6) [11, 15, 20, 3, 4, 5]


[예시3 정상적으로 숫자 순서 출력되게 하는법]
values.sort((a, b) => {
  if (a > b) return 1;
  if (a < b) return -1;
  if (a === 0) return 0;
});
console.log(values);

콘솔창 출력!
(6) [3, 4, 5, 11, 15, 20]

values.sort((a, b) => {
  return a - b;
});

console.log(values);

콘솔창 출력!
(6) [3, 4, 5, 11, 15, 20]



★ 배열의 뒤에있는 값을 제거하고 싶을 때! pop ★

[예시]
let animals = ["lion", "bear", "bird"];

console.log(animals);
콘솔창 출력!
=> (3) ['lion', 'bear', 'bird']

animals.pop();

console.log(animals);

콘솔창 출력!
=>  (2) ['lion', 'bear']

animals.push("tiger");

console.log(animals);

콘솔창 출력!
=>  (3) ['lion', 'bear', 'tiger']

★ 배열의 앞에 있는 값을 날리고 싶을 때! shift ★

[예시]

let fruits = ["apple", "pear", "banana"];
console.log(fruits);

콘솔창 출력!
=> (3) ['apple', 'pear', 'banana']

fruits.shift();
console.log(fruits);

콘솔창 출력!
=> (2) ['pear', 'banana']

fruits.unshift("cherry");

console.log(fruits);

콘솔창 출력!
=> (3) ['cherry', 'pear', 'banana']
